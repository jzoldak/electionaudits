The ElectionAudits software project is designed to help audit
elections with good statistical confidence.  It is provided in support
of the

 Principles and Best Practices for Post-Election Audits
 http://electionaudits.org/principles

For up-to-date information, see the project home page at

 http://neal.mcburnett.org/electionaudits/

Authors
=======
Neal McBurnett

Copyright and License ("MIT" aka "X11" license)
=====================
Copyright 2008 Neal McBurnett  http://neal.mcburnett.org/

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.


Requirements
============

Python (developed with python version 2.5, but should work with 2.3)
lxml (xml parsing package, e.g. python-lxml in Ubuntu or easy_install lxml)
Django 1.0  (makeauditunits.py could be separated out from this pretty easily)
sqlite3


Helpful but optional Django apps used in settings.DEBUG mode:
    lukeplant_me_uk.django.validator for automatic xhtml validation
    django_extensions - for ease in development and documentation
    debug-toolbar: http://github.com/robhudson/django-debug-toolbar/tree/master

Comment them out of audittools/settings_debug.py and
electionaudit/urls.py if you don't want them.

It has been tested on Ubuntu Linux, but shouldn't be hard to get
running on OSX or Windows.


Versions, Bug reports
=====================
The software uses launchpad.net for project support.  Visit

 https://launchpad.net/electionaudits

to get the latest version or report bugs.  It uses the bzr ("Bazaar")
distributed version control software, making it easy for you to
contribute.


Support
=======

Visit #electionaudits on irc.freenode.net


Components:
===========

makeauditunits.py
=================
A program to parse election results data into easily
manipulated databases and clean csv files.

Use the --help option to print usage instructions:

$ ./makeauditunits --help

In Windows leave off the "./":

C:> makeauditunits --help

Test data is provided, so you can just run

$ cd audittools
$ ./manage.py syncdb

$ ../makeauditunits.py -s ../testdata/t0/*.xml

In Windows:

C:> manage.py syncdb
C:> ..\makeauditunits.py ..\testdata\t0\*.xml

Use "manage.py reset electionaudit" to clear the database before
trying to re-enter data.

Currently supported input formats:

 * Hart InterCivic Tally "cumulative" reports in xml (crystal-reports)
   format (including all options: Absentee, Early and Election day, and
   the info box)

 * CSV input with one line per candidate using these headers:
   'Precinct_name'
   'Contest_title'
   'Party_Code'
   'candidate_name'
   'cand_seq_nbr'
   'absentee_votes'
   'early_votes',
   'election_votes'
 
  and these columns, only used for 1st candidate (when 'cand_seq_nbr' is 1)
    'absentee_under_votes'
    'absentee_over_votes'
    'early_under_votes',
    'early_over_votes',
    'election_under_votes'
    'election_over_votes'


electionaudit module
====================

Graphical exploration and entry of information, via a
Django-based web site.

Usage:

First run the internal django server:

$ cd audittools
$ ./manage.py syncdb

When it asks: 

 "You just installed Django's auth system, which means you don't have
 any superusers defined.  Would you like to create one now? (yes/no)"
answer "yes" and provide a username and password for the "admin" system.
Provide a valid email address also, though it won't be used unless
you customize things.

$ ./manage.py runserver

Then, in a browser, visit the main URL, e.g.

 http://127.0.0.1:8000/

to see the Audit Reports for the various Contests, etc.

See doc/model_graph.png for a diagram of the various database tables
and associated fields and relationships.

See http://127.0.0.1:8000/admin/ (using the username and password
you entered during the "syncdb" step) to enter new data, and
http://127.0.0.1:8000/admin/doc/ for more documentation on the data models
and various available views of the information.

Features:
=========

 * self-validation of all xhtml pages generated: see a report of any
errors at

 http://127.0.0.1:8000/validator/
