The ElectionAudits software project is designed to help audit
elections with good statistical confidence.  It is provided in support
of the

 Principles and Best Practices for Post-Election Audits
 http://electionaudits.org/principles

Features:
=========

It helps with several facets of the task of auditing elections:

 * Imports standard election report files
 * Protects voter anonymity by combining results for very small precincts or
   batches into larger audit units.
 * Enables audits of central-count systems and mail-in ballots
   without requiring that the paper ballots be sorted into piles by precinct.
   Works with election systems which can't produce batch results, by
   importing full election results for each batch and subtracting the result
   for the previous batch from the current batch.
 * Facilitates risk-limiting audits by calculating relevant statistics
   based on the margin, number, size, and results of the audit units.
   Support for PPEBWR, SAFE, and NEGEXP is provided, with more on the
   drawing board.
 * Ad-hoc query form lets you quickly enter information about hypothetical
   contests and get selection statistics for them also.  This supports
   planning for future audits, e.g. deciding how many batches to report
   on so as to minimize the fraction of the ballots you'll have to audit.
 * Helps candidates target unusual audit units for elective audit [planned]
 * Convenient platform for publication and archiving of auditable reports
   for the public.
 * Reports "bins" next to audit units to speed random selection with dice.
   [planned]

The software is "Open source" via the very permissive MIT license.  It
can be used with no obligation by anyone from elections officials, to
citizens to election system vendors.


For up-to-date information, see the project home page at

 http://neal.mcburnett.org/electionaudits/


Authors
=======
Neal McBurnett
Ronald L. Rivest

Copyright and License ("MIT" aka "X11" license)
=====================
Copyright 2008 Neal McBurnett  http://neal.mcburnett.org/
varsize.py: Copyright Ronald L. Rivest

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.


Support and Participation
=========================

Join the https://launchpad.net/~electionaudits team and get support
via that mailing list.

Or for real-time chat support try #electionaudits on irc.freenode.net


Versions, Bug reports
=====================
See launchpad.net for project support at

 https://launchpad.net/electionaudits

to download the latest version or report bugs.  It uses the bzr ("Bazaar")
distributed version control software, making it easy for you to
contribute.


Requirements
============

 * Python (developed with python version 2.5, but should work with 2.3)
 * lxml (xml parsing package, e.g. python-lxml in Ubuntu or easy_install lxml)
 * Django 1.0
 * sqlite3

Helpful but optional Django apps used in settings.DEBUG mode:

 * lukeplant_me_uk.django.validator for automatic xhtml validation
 * django_extensions - for ease in development and documentation
 * debug-toolbar: http://github.com/robhudson/django-debug-toolbar/tree/master

If you want to run in DEBUG mode and don't have them, just comment
them out of root/settings_debug.py and electionaudits/urls.py

It has been tested on Ubuntu Linux and Windows, and should run fine
on Mac OS X and others.


Installation
============

First install a release of python 2.5 (e.g. 2.5.2, though 2.6 might
work) If you have a recent version of Linux, e.g. any Ubuntu release
since "feisty" in 2006, you probably have it already.

For Windows, see http://www.python.org/download/

Next install the official version of Django 1.0 using the simple steps
described at http://www.djangoproject.com/download/

On Windows you can use a tool like 7-zip (http://www.7-zip.org/) to
unpack the .tar.gz file, or bsdtar
(http://gnuwin32.sourceforge.net/packages/bsdtar.htm) for more
straightforward command-line use.

Then install lxml and sqlite3.

 On Ubuntu Linux:

  $ sudo apt-get install python-lxml libsqlite3-0

 On Windows, first install setuptools:

  http://pypi.python.org/packages/2.5/s/setuptools/setuptools-0.6c9.win32-py2.5.exe

  You can then just run this:
  C:> easy-install lxml

  Or use the MS Windows Installer for lxml that matches your version of
  python at http://pypi.python.org/pypi/lxml/2.1.2, e.g.

   http://pypi.python.org/packages/2.5/l/lxml/lxml-2.1.2.win32-py2.5.exe

  Finally, get the sqlite3 library DLL from
   http://www.sqlite.org/download.html
   e.g. http://www.sqlite.org/sqlitedll-3_6_4.zip
  unzip it and put the .dll file with your other DLLs in
  your default System directory, e.g. C:\WINDOWS\system32

Initialization
==============

When you first install or upgrade the software, you need to
initialize the database:

$ cd root
$ ./manage.py syncdb

In Windows leave off the "./":

C:> cd root
C:> manage.py syncdb

When it asks: 

 "You just installed Django's auth system, which means you don't have
 any superusers defined.  Would you like to create one now? (yes/no)"

answer "yes" and provide a username and password for the "admin" system.
Logging in with this account, or another "staff" account, is necessary
for parsing new data files from within the web interface.

It asks for a valid email address also, but doesn't share it or use
it unless you customize things.

Usage
=====

parse
=====

You can import and parse new files in two ways: via the
http://127.0.0.1:8000/parse/ page (see below) or from the
command line.

From the command line, use the manage.py parse command to import
election results data into easily manipulated databases.

Use the --help option to print usage instructions:

$ ./manage.py parse --help

In Windows leave off the "./":

C:> manage.py parse --help

Test data is provided, so you can just run

$ ./manage.py parse -s -c ../testdata/t0

which parses all the files in that directory in chronological order.
It may take a while to run.  A brief synopsis of each contest is
printed at the end.

In Windows:

C:> manage.py parse
or
C:> manage.py parse -s -c ..\testdata\t0


Use "manage.py reset electionaudits" to clear the database before
trying to re-enter data.

Currently supported input formats:

 * Hart InterCivic Tally "cumulative" reports in xml (crystal-reports)
   format (including all options: Absentee, Early and Election day, and
   the info box)

   One file per cumulative batch of input.  Use the "-s" option to
   "manage.py parse" to subtract each cumulative report from the previous one.

   Examples: testdata/t0/*.xml

 * CSV input with one line per candidate using these headers:
   'Precinct_name'
   'Contest_title'
   'Party_Code'
   'candidate_name'
   'cand_seq_nbr'
   'absentee_votes'
   'early_votes',
   'election_votes'
 
  and these columns, only used for 1st candidate (when 'cand_seq_nbr' is 1)
    'absentee_under_votes'
    'absentee_over_votes'
    'early_under_votes',
    'early_over_votes',
    'election_under_votes'
    'election_over_votes'

  Examples: testdata/t1.csv

Planned
 * Hart "precinct" reports

Web server
==========

This provides a web-based graphical user interface for exploration,
reporting and even entry of information.  It is built on the Django
framework.

Usage:

First run the internal django server:

$ cd root
$ ./manage.py runserver

This will remain running until you kill it with ctrl-c or close the window.
It will show each web page you visit.

Then, in a browser, visit the main URL, e.g.

 http://127.0.0.1:8000/

to see the Audit Reports for the various Contests, etc.

The "Parse incoming data files" page <http://127.0.0.1:8000/parse/>
provides an alternative to the command line for importing xml data files.
It automatically selects the --subtract and --chronological options.

Just put the files in the "incoming" directory, visit that page to see
a list of the files, and click the button.  Beware that there is
currently no feedback during the import, so just be patient.

See http://127.0.0.1:8000/admin/ (using the username and password
you entered during the "syncdb" step) to enter new data, and
http://127.0.0.1:8000/admin/doc/ for more documentation on the data models
and various available views of the information.


See doc/model_graph.png for a diagram of the various database tables
and associated fields and relationships.


Debugging
=========

If you install the django html validator app
lukeplant_me_uk.django.validator and use debug settings
  manage.py runserver --settings settings_debug
the server will do self-validation of all xhtml pages generated.
You can then see a report of any errors at

 http://127.0.0.1:8000/validator/

Acknowledgements:
=================
Thanks to these contributors:

The auditing experts led by Mark Halvorson and John McCarthy at Verified Voting

Very helpful user feedback from
 Crystal Christman, Mark Lindeman, Hillary Hall
