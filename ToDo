ToDo list for ElectionAudits

Sort by timestamp or end of file name

Find a way to distinguish paper from dre batches and not combine them
 add option ala "don't combine if batch letter 14 is different"
 or general RE logic to compare batch names?

Allow filtering by type or precinct in audit report

Figure out how to have Contest.margin default to float('nan') without
 odd NULL errors

Move to bzr-based versions: 0.7-r32 or 0.8.dev-r33 (would want bzr support)
use the -f option of easy_install for other deps
move to README.txt?
move electionaudit => electionaudits

deal better with "Not enough ballots for privacy" in entire input for a contest
 complain more loudly, prompt user for OK?
 Save temp db record for next input batch?

Use AuditUnit in parse_xml_crystal and generate django tables from
incremental reports via --subtract in addition to std output reports as now 

Use custom view for more efficiently sorted audit report detail and report.html
no inner nested query loop contestbatch.votecount_set.all|dictsort:"choice.name"

scenarios: test lots of data - speed, ease of fixing problem files
take directory name for xml reports, sort by timestamp for --subtract

Provide makeauditunits option to name election for xml files.
separate out Contests by CountyElection in audit report

Fix contest detail report - not finding contestbatches (but little-used)
Paginate votecount report
Provide good html titles for all pages

Produce output in csv format also

Deal with namespace issues - auto-edit file, or handle it another way.

Improve documentation - put model diagram in media
Get rid of or document unused stuff

Figure out ballot counts (CVRs) based on max of all contests in batch?
  too bad @ballots_cast != 'Total Number of Voters' from pdf?
Incorporate Rivest's varsize.py code to report statistics and confidence
 paper() => # to audit via rule of thumb, APR, SAFE, Negexp, PPEBWR, 
 evaluate() => stats for specified # selected precincts, precinct sizes, margin
  levels and select audit units to be audited.
 change stdout to do logging, or replace "print" with logger.debug
 or convert to templates
 def evaluate: return calculated values
 parameterize max_shift_per_precinct

 pps.py: actually chooses audit units.  Link to throw of dice, ala RFC 3797?


Add table relating batch names to description - type, source, mbbs, etc
and link to that from batch name

Separate makeauditunits.py and util.py from django dependencies - use plugins?
separate makeauditunits.py from particular audittools.settings - pass arg?
rename/move electionaudit directory/module to electionaudits
look thru pylint advice
perhaps automatically generate doc and put in doc directory before packaging
auto-update README on web site

Use django choices for batch.type
Add info about file arguments to auto-usage message

Don't assume or check that audit report rows are all in the same sequence
Put Under, Over at end
Allow user to sort them by winner or alphabetically

Perhaps for privacy, print "few" rather than a number less than 3?

Provide variant methods of combining batches for privacy (class Push)
 really want to deal with entropy of results, not number
 preserve more audit units: try to only combine small units together
 can also generate a different CountyElection with more or less detail

While parsing xml, track unrecognized FormattedValue fields - dump
 FieldName, value and line

Develop view /<countyelection>/<contest>/auditreport:
 including just batches that are in the county

Add "audited" flag (selected, success, or failure with notes?)
 and form to mark them off
 or blank report for entering numbers.  timestamps?
 want audit results report by contest - flag discrepancies.  do stats??
 perhaps also progress flags - selected, fetched, counting, done, recheck
 and update stats
Provide report of just contestbatches selected for audit
Set template LANGUAGE_CODE or report or fix html errors in databrowse base.html

Put contest abbreviation in a new field, option to print with it or not

Test on windows

Need a way to sort DRE results out separately.

Option to produce full collection of auditable reports for all contests,
 in pdf?

Encapsulate election-specific data in specific classes
  including list of contest edits ("replacements var"), fields of relevance, etc
  some day: do that based on "programming" data from Hart system?

Auto-sort result files, check for non-incremental results
Check for results that list different candidates for a contest
Look for suspicious audit units, anomalous results
Look for columns that don't agree with previous result


Packaging:
Package up, as an egg?  And submit to http://pypi.python.org/pypi

avoid dependency on setuptools version 0.6c9 to run (even to display help)
take out bzr dependencies for users
Include data files
Try to get windows egg
How to get "pure" package, not platform-dependent?
Get setup.py to create audittools tree in a demo script directory, not lib

maybe switch from __file__ to resource management system for packaged data files
 ala  http://peak.telecommunity.com/DevCenter/PythonEggs#resource-management
  from pkg_resources import Requirement, resource_filename
  filename = resource_filename(Requirement.parse("MyProject"),"sample.conf")
 but that won't take care of location for dev.db DATABASE_NAME

allow xml files to be compressed with e.g. zip
easy_install --editable projectname==dev
add setup.py --test and doctest support: wrapping tests in TestSuite

look at output during easy_install of lxml

setup.py register sdist bdist_egg upload --sign

describe how to host on google app engine
